{"version":3,"sources":["componentes/Formulario.js","hepers.js","componentes/Resultado.js","componentes/Mensaje.js","componentes/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","state","cantidad","plazo","calcularPrestamo","e","preventDefault","props","datosPrestamo","actualizarState","target","name","value","setState","Number","habilitarSubmit","onSubmit","this","onChange","type","className","placeholder","disabled","Component","calcularTotal","totalCantidad","totalPlazo","Resultado","console","log","total","toFixed","Mensaje","Spinner","App","cargando","setTimeout","componente","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA2FeA,E,2MAtFXC,MAAQ,CACJC,SAAU,GACVC,MAAO,I,EAGXC,iBAAmB,SAACC,GAChBA,EAAEC,iBADoB,MAGI,EAAKL,MAAxBC,EAHe,EAGfA,SAAUC,EAHK,EAGLA,MAEjB,EAAKI,MAAMC,cAAcN,EAAUC,I,EAKvCM,gBAAkB,SAACJ,GAAM,MAWCA,EAAEK,OAAjBC,EAXc,EAWdA,KAAMC,EAXQ,EAWRA,MAGb,EAAKC,SAAL,eACKF,EAAQG,OAAOF,M,EAIxBG,gBAAkB,WAAM,MAEM,EAAKd,MAAxBC,EAFa,EAEbA,SAAUC,EAFG,EAEHA,MAKjB,OAHkBD,IAAaC,G,wEAY/B,OACI,0BAAMa,SAAUC,KAAKb,kBACjB,6BACI,sDACA,2BAEIc,SAAUD,KAAKR,gBACfU,KAAK,SACLR,KAAK,WACLS,UAAU,eACVC,YAAY,mBAGpB,6BACI,qDACA,4BAASH,SAAUD,KAAKR,gBAAiBE,KAAK,QAAQS,UAAU,gBAC5D,4BAAQR,MAAM,IAAd,eACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cAGR,6BACI,2BACIU,SAAUL,KAAKF,kBACfI,KAAK,SACLP,MAAM,WACNQ,UAAU,sC,GA/ETG,aCFlB,SAASC,EAActB,EAAUC,GAepC,IAAIsB,EAYAC,EAEJ,OAXID,EADAvB,GAAY,IACe,IAAXA,EACTA,EAAW,KAAQA,GAAY,IACX,GAAXA,EACTA,EAAW,KAAQA,GAAY,IACX,IAAXA,EAEW,GAAXA,EAKZC,GACJ,KAAK,EACDuB,EAAwB,IAAXxB,EACb,MACJ,KAAK,EACDwB,EAAwB,GAAXxB,EACb,MACJ,KAAK,GACDwB,EAAwB,IAAXxB,EACb,MACJ,KAAK,GACDwB,EAAwB,GAAXxB,EAMrB,OAAOA,EAAWuB,EAAgBC,EC7CtC,IAaeC,EAbG,SAACpB,GAEf,OADAqB,QAAQC,IAAItB,GAER,yBAAKa,UAAU,0BACX,0CACA,4DAAkCb,EAAML,UACxC,0CAAgBK,EAAMJ,MAAtB,UACA,+CAAqBI,EAAMuB,OAC3B,wDAA+BvB,EAAMuB,MAAQvB,EAAMJ,OAAO4B,QAAQ,MCH/DC,EANC,WACZ,OACI,yECWOC,G,MAZC,WACZ,OACI,yBAAKb,UAAU,WACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UACf,yBAAKA,UAAU,aC0FZc,E,2MAnFbjC,MAAQ,CACN6B,MAAO,GACP5B,SAAU,GACVC,MAAO,GACPgC,UAAU,G,EAoBZ3B,cAAgB,SAACN,EAAUC,GAKzB,IAAM2B,EAAQN,EAActB,EAAUC,GAGtC,EAAKU,SAAS,CACZsB,UAAU,IACT,WACDC,YAAW,WACT,EAAKvB,SAAS,CAIZiB,QACA5B,WACAC,QACAgC,UAAU,MAEX,S,wEAIE,IAKDE,EALC,EAEsCpB,KAAKhB,MAAzC6B,EAFF,EAEEA,MAAO3B,EAFT,EAESA,MAAOD,EAFhB,EAEgBA,SAAUiC,EAF1B,EAE0BA,SAe/B,OAREE,EAHW,KAATP,GAAgBK,EAEVA,EACG,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACCL,MAAOA,EACP3B,MAAOA,EACPD,SAAUA,IAPX,kBAAC,EAAD,MAWX,kBAAC,WAAD,KACE,sDACA,yBAAKkB,UAAU,aACb,kBAAC,EAAD,CAEEZ,cAAeS,KAAKT,gBAEtB,yBAAKY,UAAU,YACZiB,S,GA9EGd,a,MCFEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a79a06b0.chunk.js","sourcesContent":["//Importo react\nimport React, { Component } from 'react';\n\n//defino la clase Formulario que extiende de Component\nclass Formulario extends Component {\n    state = { \n        cantidad: '',\n        plazo: ''\n     }\n\n    calcularPrestamo = (e) => {\n        e.preventDefault();\n        //aplicar desturcturing\n        const {cantidad, plazo} = this.state;\n        //pasarlo al componente padre\n        this.props.datosPrestamo(cantidad, plazo);\n\n    }\n    \n    //metodo actualizarState\n    actualizarState = (e) => {\n        //Leer los datos del formulario\n        //e.target me indica el elemto en el que estoy escribiendo\n        //e.target.value me indica el valor del elemto\n        //console.log(e.target.value);\n\n        //Asignación por destructuring\n        //Recomendación: Si colocamos el mismo nombre para el elemento html como para el el atributo\n        //del state se nos facilitan las cosas.\n        //en este caso, los nombres de los elemtos html (cantidad y plazo)\n        //son los mismos a las propiedades del objeto 'state' (cantidad y plazo)\n        const {name, value} = e.target;\n\n        //Actualizar el state\n        this.setState({\n            [name] : Number(value)\n        })\n    }\n\n    habilitarSubmit = () => {\n        //aplicar destructuring\n        const {cantidad, plazo} = this.state;\n        //leer las variables\n        const noValido = !cantidad || !plazo\n        //console.log(noValido);\n        //retornar una respuesta\n        return noValido;\n    }\n    \n     // render() es el unico medoto que es obligatorio en los Class components\n    render() { \n        \n        //accedemos al atributo cantidad del objeto 'state'\n        //const {cantidad} = this.state //ojo, para renderizar debo comentar esta linea\n\n        return ( \n            <form onSubmit={this.calcularPrestamo}>\n                <div>\n                    <label>Cantidad prestamo: </label>\n                    <input \n                        //lo que esta entre {} es codigo javascript\n                        onChange={this.actualizarState}\n                        type=\"number\" \n                        name=\"cantidad\" \n                        className=\"u-full-width\" \n                        placeholder=\"Ejemplo: 3000\" \n                    />\n                </div>\n                <div>\n                    <label>Plazo para pagar: </label>\n                    <select  onChange={this.actualizarState} name=\"plazo\" className=\"u-full-width\">\n                        <option value=\"\">Seleccionar</option>\n                        <option value=\"3\">3 Meses</option>\n                        <option value=\"6\">6 Meses</option>\n                        <option value=\"12\">12 Meses</option>\n                        <option value=\"24\">24 Meses</option>\n                    </select>\n                </div>\n                <div>\n                    <input \n                        disabled={this.habilitarSubmit()}\n                        type=\"submit\" \n                        value=\"Calcular\" \n                        className=\"u-full-width button-primary\" \n                    />\n                </div>\n            </form>\n         );\n    }\n}\n \nexport default Formulario;","//import { switchCase } from \"@babel/types\";\n\nexport function calcularTotal(cantidad, plazo){\n    /*\n    * CANTIDADES\n    * 0      a 1000  = 25%\n    * 1001   a 5000  = 20%\n    * 5001   a 10000 = 15%\n    * >10001 a       = 10%\n    * \n    * MESES\n    * 3  = 5%\n    * 6  = 10%\n    * 12 = 15%\n    * 24 = 20%\n    */\n\n    let totalCantidad;\n\n    if (cantidad <= 1000) {\n        totalCantidad = cantidad * .25;\n    } else if (cantidad > 1000 && cantidad <= 5000) {\n        totalCantidad = cantidad * .20;\n    } else if (cantidad > 5000 && cantidad <= 10000) {\n        totalCantidad = cantidad * .15;\n    } else {\n        totalCantidad = cantidad * .10;\n    }\n\n    let totalPlazo;\n\n    switch (plazo) {\n        case 3:\n            totalPlazo = cantidad * .05;\n            break;\n        case 6:\n            totalPlazo = cantidad * .10;\n            break;\n        case 12:\n            totalPlazo = cantidad * .15;\n            break;\n        case 24:\n            totalPlazo = cantidad * .20;\n            break;  \n        default:\n            break;\n    }\n\n    return cantidad + totalCantidad + totalPlazo;\n\n}","import React from 'react';\n\n//paso por props los datos (total,cantidad y plazo desde el App.js)\nconst Resultado = (props) => {\n    console.log(props);\n    return ( \n        <div className=\"u-full-width resultado\">\n            <h2>Resultados</h2>\n            <p>La cantidad solicitada fue: $ {props.cantidad}</p>\n            <p>A pagar en: {props.plazo} meses</p>\n            <p>Total a pagar: $ {props.total}</p>\n            <p>Su pago mensual es de: $ { (props.total / props.plazo).toFixed(2) }</p>\n        </div>\n     );\n}\n \nexport default Resultado;\n","import React from 'react';\n\nconst Mensaje = () => {\n    return ( \n        <p>Agrega una cantidad y un plazo para pagar</p>\n     );\n}\n \nexport default Mensaje;\n","import React from 'react';\nimport '../spinner.css';\n\nconst Spinner = () => {\n    return ( \n        <div className=\"spinner\">\n            <div className=\"rect1\"></div>\n            <div className=\"rect2\"></div>\n            <div className=\"rect3\"></div>\n            <div className=\"rect4\"></div>\n            <div className=\"rect5\"></div>\n        </div>  \n     );\n}\n \nexport default Spinner;","//Importo react\nimport React, { Component, Fragment } from 'react';\n\nimport './normalize.css';\nimport './skeleton.css';\n//Importamos los componentes\nimport Formulario from './componentes/Formulario';\n//Importamos el helper function src/helpers.js por destructuring\nimport { calcularTotal } from './hepers';\nimport Resultado from './componentes/Resultado';\nimport Mensaje from './componentes/Mensaje';\nimport Spinner from './componentes/Spinner';\n\n//defino la clase App que extiende de Component\nclass App extends Component {\n\n  //definición del objeto\n  state = {\n    total: '',\n    cantidad: '',\n    plazo: '',\n    cargando: false\n  }\n  // render() es el unico medoto que es obligatorio en los Class components\n  //<Formulario/> hace un llamado a nuestro componente \n  //cunado quiero retornar mas de un elemto dentro del return tengo que\n  //rodearlo por un elemento padre. Ejemplo por un div:\n  /*\n  *<div>\n  * <Formulario />\n  * <Formulario />\n  *</div> \n  o lo hacemos importando Fragment y colocando nuestros elementos\n  dentro del elemto  <Fragment></Fragment>. Esta es la mejor forma \n\n  no puedo usar un class en un etiqueta escribiendo codigo react con JSX\n  se debe usar en su lugar className\n  */\n  \n  //creamos el props datosPrestamo para enviar los datos\n  //cantidad, plazo son las variables que le paso desde el componente Formulario.js\n  datosPrestamo = (cantidad, plazo) => {\n    /*console.log(cantidad);\n    console.log(plazo);*/\n\n    //Usamos el helper function src/helpers.js\n    const total = calcularTotal(cantidad, plazo);\n\n    //setear el state con el total,cantidad, plazo y cargando\n    this.setState({\n      cargando: true //habilito el sppiner\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          //'total: total' es es igual a si lo coloco así 'total',\n          //porque la variable donde almaceno el total (total = calcularTotal(cantidad, plazo);)\n          //tiene el mismo nombre de la variable del state(total)\n          total,\n          cantidad,\n          plazo,\n          cargando: false //deshabilito el sppiner\n        })\n      }, 3000);\n    })\n  }\n  // aqui usamos los componentes <Formulario/> y <Resultado/>\n  render() { \n      //aplico un destructuring antes del return() para acceder a los datos del state\n      const {total, plazo, cantidad, cargando} = this.state;\n\n      //cargar un componente condicionalmente\n      let componente;\n      if (total=== '' && !cargando) {\n        componente=<Mensaje />;\n      } else if(cargando){\n        componente=<Spinner />;\n      } else {\n        componente=<Resultado \n                    total={total}\n                    plazo={plazo}\n                    cantidad={cantidad}\n                    />;\n      }\n      return ( \n        <Fragment>\n          <h1>Cotizador de prestamos</h1>\n          <div className=\"container\">\n            <Formulario \n              //en la variable datosPrestamo en viamos el contenido de la función datosPrestamo()\n              datosPrestamo={this.datosPrestamo}\n            />\n            <div className=\"mensajes\">\n              {componente}\n            </div>\n          </div>\n        </Fragment>\n       );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}